<?php
//Moneybookers.module www.3formed.co.uk Aug 09

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_moneybookers_menu() {

    // Always accessible, helps for testing while site is offline.
    $items['uc_moneybookers/ipn'] = array(
      'title' => t('Moneybookers IPN'),
      'page callback' => 'uc_moneybookers_ipn',
      'type' => MENU_CALLBACK,
    );

    // Callback functions for Website Payments Standard.
    $items['uc_moneybookers/wps/complete'] = array(
      'title' => t('Moneybookers payment complete'),
      'page callback' => 'uc_moneybookers_complete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    $items['uc_moneybookers/wps/cancel'] = array(
      'title' => t('Moneybookers payment cancelled'),
      'page callback' => 'uc_moneybookers_cancel',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );


  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_moneybookers_perm() {
  return array('administer Moneybookers');
}



/**
 * Implementation of hook_form_alter().
 * Notice how we alter the checkout review form to post the order to Moneybookers.
 */
function uc_moneybookers_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);

    if ($order->payment_method == 'Moneybookers_wps') {
      unset($form['submit']);
      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $form['#suffix'] = '</td><td>'. drupal_get_form('uc_moneybookers_wps_form', $order) .'</td></tr></table>';
    }
  }



}


/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/



/**
 * Implementation of hook_payment_method().
 */
function uc_moneybookers_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_moneybookers');
  $title1 = '<a href="http://www.moneybookers.com" target="_new"><img src="' . $path . '/images/moneybookers_logo.jpg" style="position: relative; top: 5px; margin-right: 4px;"></a><br />'
         . t('Moneybookers - Pay Online Using Your Credit / Debit Card.');

  $methods[] = array(
    'id' => 'Moneybookers_wps',
    'name' => t('Moneybookers Website Payments Standard'),
    'title' => $title1,
    'review' => t('Moneybookers'),
    'desc' => t('Redirect users to submit payments through Moneybookers.'),
    'callback' => 'uc_payment_method_Moneybookers_wps',
    'weight' => 1,
    'checkout' => FALSE,
    'no_gateway' => TRUE,
  );

  
  return $methods;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/


// Handles the Website Payments Standard payment method.
function uc_payment_method_Moneybookers_wps($op, &$arg1) {
  switch ($op) {
    case 'order-view':
      $txn_id = db_result(db_query("SELECT txn_id FROM {uc_payment_moneybookers_ipn} WHERE order_id = %d ORDER BY received ASC", $arg1->order_id));
      if (empty($txn_id)) {
        $txn_id = t('Unknown');
      }
      return t('Transaction ID:<br>@txn_id', array('@txn_id' => $txn_id));

    case 'settings':
      $form['uc_moneybookers_wps_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Moneybookers e-mail address'),
        '#description' => t('The e-mail address you use for the Moneybookers account you want to receive payments.'),
        '#default_value' => variable_get('uc_moneybookers_wps_email', ''),
      );
      $form['uc_moneybookers_wps_currency'] = array(
        '#type' => 'select',
        '#title' => t('Currency code'),
        '#description' => t('Transactions can only be processed in one of the listed currencies.'),
        '#options' => _uc_moneybookers_currency_array(),
        '#default_value' => variable_get('uc_moneybookers_wps_currency', 'USD'),
      );

      $form['uc_moneybookers_wps_payment_action'] = array(
        '#type' => 'select',
        '#title' => t('Payment action'),
        '#description' => t('"Complete sale" will authorize and capture the funds at the time the payment is processed. Only capture supported.'),
        '#options' => array(
          'Sale' => t('Complete sale'),
        ),
        '#default_value' => variable_get('uc_moneybookers_wps_payment_action', 'Sale'),
      );
      $form['uc_moneybookers_wps_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Order review submit button text'),
        '#description' => t('Provide Moneybookers WPS specific text for the submit button on the order review page.'),
        '#default_value' => variable_get('uc_moneybookers_wps_checkout_button', t('Process Payment With Moneybookers')),
      );

      $form['uc_moneybookers_wps_secret_word'] = array(
        '#type' => 'textfield',
        '#title' => t('You need to add this to your moneybookers account before md5sig validation for ipn will work'),
        '#description' => t('the secret word associated with your moneybookers account.'),
        '#default_value' => variable_get('uc_moneybookers_wps_secret_word', t('secret')),
      );

      return $form;
  }
}



// Process Instant Payment Notifiations from Moneybookers.
function uc_moneybookers_ipn($order_id = 0) {
  watchdog('uc_moneybookers', t('Receiving IPN at URL for order @order_id. <pre>@debug</pre>',
    array('@order_id' => $order_id, '@debug' => variable_get('uc_moneybookers_wps_debug_ipn', FALSE) ? print_r($_POST, TRUE) : '')));

  if (!isset($_POST['transaction_id'])) {
    watchdog('uc_moneybookers', t('IPN attempted with invalid order ID.'), WATCHDOG_ERROR);
    return;
  }


  $order_id = intval($_POST['transaction_id']);

  $order = uc_order_load($order_id);

  if ($order == FALSE) {
    watchdog('uc_moneybookers', t('IPN attempted for non-existent order.'), WATCHDOG_ERROR);
    return;
  }
  $verified = false;
  // Assign posted variables to local variables
  $pay_to_email = check_plain($_POST['pay_to_email']);
  $pay_from_email = check_plain($_POST['pay_from_email']);
  $mb_transaction_id = check_plain($_POST['mb_transaction_id']);
  $mb_amount = check_plain($_POST['mb_amount']);
  $mb_currency = check_plain($_POST['mb_currency']);
  $merchant_id = check_plain($_POST['merchant_id']);
  $status = check_plain($_POST['status']);
  $md5sig = check_plain($_POST['md5sig']);
  $customer_id = check_plain($_POST['merchant_fields']);
  $customer_id = split('=',$customer_id);
  $customer_id = $customer_id[1];
  $mb_transaction_id = check_plain($_POST['mb_transaction_id']);
  $txn_id = check_plain($_POST['transaction_id']);


  //calculate md5sig for verification
  $secret = variable_get('uc_moneybookers_wps_secret_word', t('secret'));
  $md5sig_calc = md5($merchant_id . $transaction_id . strtoupper($secret) . $mb_amount . $mb_currency . $status);
  if ($md5sig = $md5sig_calc) $verified = true;


if ($verified) {
      watchdog('uc_moneybookers', t('IPN transaction verified.'));

      $duplicate = db_result(db_query("SELECT COUNT(*) FROM {uc_payment_moneybookers_ipn} WHERE txn_id = '%s' AND status != 'Pending'", $txn_id));
      if ($duplicate > 0) {
        if ($order->payment_method != 'credit') {
          watchdog('uc_moneybookers', t('IPN transaction ID has been processed before.'), WATCHDOG_NOTICE);
        }
        return;
      }

      db_query("INSERT INTO uc_payment_moneybookers_ipn (merchant_id,customer_id,txn_id,mb_txn_id,mb_amount,mb_currency,status,md5sig,pay_to_email,pay_from_email) VALUES ('$merchant_id', '$customer_id', '$txn_id',
              '$mb_txn_id', '$mb_amount', '$mb_currency', '$status', '$md5sig', '$pay_to_email', '$pay_from_email')");



      switch ($status) {


        case '2':
          $comment = t('Moneybookers transaction ID: @txn_id', array('@txn_id' => $txn_id));
          uc_payment_enter($order_id, 'Moneybookers_wps', $mb_amount, $order->uid, NULL, $comment);
          uc_cart_complete_sale($order);
          uc_order_comment_save($order_id, 0, t('Payment of !amount !currency submitted through Moneybookers.', array('!amount' => uc_currency_format($mb_amount, FALSE), '!currency' => $payment_currency)), 'order', 'payment_received');
          uc_order_comment_save($order_id, 0, t('Moneybookers IPN reported a payment of !amount !currency.', array('!amount' => uc_currency_format($mb_amount, FALSE), '!currency' => $payment_currency)));
          break;

        case '-1':
          uc_order_comment_save($order_id, 0, t('The authorization has benn cancelled or expired and cannot be captured.'), 'admin');
          break;

        case '-2':
          uc_order_comment_save($order_id, 0, t("The customer's attempted payment from a bank account failed."), 'admin');
          break;

        case '0':
          uc_order_update_status($order_id, 'Moneybookers pending');
          uc_order_comment_save($order_id, 0, t('Payment is pending at Moneybookers: @reason', array('@reason' => 'Await confirmation of completion before processing order'), 'admin'));
          break;


        case '-3':
          watchdog('uc_moneybookers', t('Moneybookers has reversed a payment!'), WATCHDOG_ERROR);
          uc_order_comment_save($order_id, 0, t('Payment has been reversed by Moneybookers: @reason', array('@reason' => "Login To Moneybookers to See Why"), 'admin'));
          break;

      }
}
}

// Handles a complete Website Payments Standard sale.
function uc_moneybookers_complete($order_id = 0) {
  if (intval($_SESSION['cart_order']) != $order_id) {
    $_SESSION['cart_order'] = $order_id;
  }

  if (!($order = uc_order_load($order_id))) {
    drupal_goto('cart');
  }

  // This lets us know it's a legitimate access of the complete page.
  $_SESSION['do_complete'] = TRUE;

  drupal_goto('cart/checkout/complete');
}

// Handles a canceled Website Payments Standard sale.
function uc_moneybookers_cancel() {
  unset($_SESSION['cart_order']);

  drupal_set_message(t('Your Moneybookers.com payment was cancelled. Please feel free to continue shopping or contact us for assistance.'));

  drupal_goto('cart');
}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/
// Returns the form elements for the Website Payments Standard form.
function uc_moneybookers_wps_form($form_state,$order) {

 $shipping = 0;
  foreach ($order->line_items as $item) {
    if ($item['type'] == 'shipping') {
      $shipping += $item['amount'];
    }
  }

  $tax = 0;
  if (module_exists('uc_taxes')) {
    foreach (uc_taxes_calculate($order) as $tax_item) {
      $tax += $tax_item['amount'];
    }
  }

  $address = variable_get('uc_moneybookers_wps_address_selection', 'billing');

  $country = uc_get_country_data(array('country_id' => $order->{$address .'_country'}));
  if ($country === FALSE) {
    $country = array(0 => array('country_iso_code_2' => 'US'));
  }

  for ($i = 0; $i < strlen($order->{$address .'_phone'}); $i++) {
    if (is_numeric($order->{$address .'_phone'}[$i])) {
      $phone .= $order->{$address .'_phone'}[$i];
    }
  }


  $data = array(
    'pay_to_email' => variable_get('uc_moneybookers_wps_email', 'enteryouremail@inconfigsettings.com'),
    'transaction_id' => $order->order_id,
    'return_url' => url('uc_moneybookers/wps/complete/'. $order->order_id, array('absolute' => TRUE)),
    'status_url' => url('uc_moneybookers/ipn/'. $order->order_id, array('absolute' => TRUE)),
    'cancel_url' => url('uc_moneybookers/wps/cancel', array('absolute' => TRUE)),
    'language' => "EN",
    'merchant_fields' => "customer_number",
    'customer_number' => $user->uid,
    'pay_from_email' => $order->primary_email,
    'amount2_description' => 'Order Number ' . $order->order_id . ' product(s)',
    'amount2' => number_format($order->order_total - $shipping - $tax,2),
    'amount3_description' => 'Delivery Charges',
    'amount3' => number_format($shipping,2),
    'amount4_description' => 'Taxes',
    'amount4' => number_format($tax,2),
    'amount' => number_format(number_format($tax,2) + number_format($shipping,2) + number_format($order->order_total - $shipping - $tax,2),2),
    'currency' => variable_get('uc_moneybookers_wps_currency', 'USD'),
    'address' => substr($order->{$address .'_street1'}, 0, 100),
    'address2' => uc_get_zone_code($order->{$address .'_street2'},0,100),
    'city' => substr($order->{$address .'_city'}, 0, 40),
    'state' => uc_get_zone_code($order->{$address .'_zone'}),
    'country' => $country[0]['country_iso_code_2'],
    'email' => $order->primary_email,
    'firstname' => substr($order->{$address .'_first_name'}, 0, 32),
    'lastname' => substr($order->{$address .'_last_name'}, 0, 64),
    'postal_code' => $order->{$address .'_postal_code'},
  );

  $form['#action'] = 'https://www.Moneybookers.com/app/payment.pl';

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_moneybookers_wps_checkout_button', t('Submit Order')),
  );

  return $form;
}



// Sends a request to Moneybookers and returns a response array.
function uc_moneybookers_api_request($request, $server) {
  $request['USER'] = variable_get('uc_moneybookers_api_username', '');
  $request['PWD'] = variable_get('uc_moneybookers_api_password', '');
  $request['VERSION'] = '3.0';
  $request['SIGNATURE'] = variable_get('uc_moneybookers_api_signature', '');

  $data = '';
  foreach ($request as $key => $value) {
    $data .= $key .'='. urlencode(ereg_replace(',', '', $value)) .'&';
  }
  $data = substr($data, 0, -1);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $server);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION,0);
  $response = curl_exec($ch);
  if ($error = curl_error($ch)) {
    watchdog('uc_moneybookers', $error, WATCHDOG_ERROR);
  }
  curl_close($ch);

  return _uc_moneybookers_nvp_to_array($response);
}

// Returns the description and subtotal of the products on an order.
function _uc_moneybookers_product_details($items) {
  $desc = '';
  $subtotal = 0;

  if (!empty($items)) {
    foreach ($items as $item) {
       if (!empty($desc)) {
        $desc .= ' / ';
       }
       $desc .= $item->qty .'x '. $item->title;
       $subtotal += $item->qty * $item->price;
    }
  }

  return array($desc, $subtotal);
}



// Returns an array of possible currency codes.
function _uc_moneybookers_currency_array() {
  return drupal_map_assoc(array('AUD', 'CAD', 'CHF', 'CZK', 'DKK', 'EUR', 'GBP', 'HKD', 'HUF', 'JPY', 'NOK', 'NZD', 'PLN', 'SEK', 'SGD', 'USD'));
}
